unit ExportExcelFile;

interface

uses

  ComObj, ActiveX, Variants, Windows, Messages, SysUtils, Classes, Vcl.Dialogs;

  type
  TExportExcelFileGo = class


  private
    { Private declarations }
  function CheckExcelInstall:boolean;
  function RunExcel(DisableAlerts:boolean=true; Visible: boolean=false): boolean;
  procedure ExcelReport;
  Constructor Create;

  public
    { Public declarations }
  end;

 var GFPCalExcel: OleVariant;
 const ExcelApp = 'Excel.Application';


implementation

// класс TExportExcelFileGo проверяет установлен ли Excel на машине пользователя
// если установлен, экспортирует главную расчётную таблицу в Excel файл


{ TExportExcelFileGo }

function TExportExcelFileGo.CheckExcelInstall: boolean;
   var
  ClassID: TCLSID;
  Rez : HRESULT;
begin
  // Ищем CLSID OLE-объекта
  Rez := CLSIDFromProgID(PWideChar(WideString(ExcelApp)), ClassID);
  if Rez = S_OK then  // Объект найден
    Result := true
  else
    Result := false;
end;

constructor TExportExcelFileGo.Create;
begin
  CheckExcelInstall;
  RunExcel;
end;

procedure TExportExcelFileGo.ExcelReport;
begin

end;


function TExportExcelFileGo.RunExcel(DisableAlerts, Visible: boolean): boolean;
begin
 try
{проверяем установлен ли Excel}
    if CheckExcelInstall then
      begin
      {  GFPCalExcel:=CreateOleObject(ExcelApp);
//показывать/не показывать системные сообщения Excel (лучше не показывать)
        GFPCalExcel.Application.EnableEvents:=DisableAlerts;
        GFPCalExcel.Visible:=Visible;
        }
    ShowMessage('Excel установлен');
        Result:=true;
      end
    else
      begin
        MessageBox(0,'Приложение MS Excel не установлено на этом компьютере','Ошибка',MB_OK+MB_ICONERROR);
        Result:=false;
      end;
  except
    Result:=false;
  end;
end;

end.
